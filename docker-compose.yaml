version: "3"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:latest
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://broker:29092,PLAINTEXT://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://broker:29092,PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true

  tasks-pg:
    container_name: tasks-pg
    image: postgres
    restart: always
    ports:
      - "5555:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=tasks-db
    healthcheck:
      test: ["CMD", "pg_isready -U user"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - tasks_data:/var/lib/postgresql/data
      
  task-service-1:
    container_name: task-service-1
    build:
      context: ./task-management-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - broker
      - tasks-pg
    ports:
      - "8080:8080"
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=admin
      - DB_HOST=tasks-pg
      - DB_PORT=5432
      - DB_NAME=tasks-db
      - APP_PORT=8080

  task-service-2:
    container_name: task-service-2
    build:
      context: ./task-management-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - broker
      - tasks-pg
    ports:
      - "8081:8080"
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=admin
      - DB_HOST=tasks-pg
      - DB_PORT=5432
      - DB_NAME=tasks-db
      - APP_PORT=8080
      
  users-pg:
    container_name: users-pg
    image: postgres
    restart: always
    ports:
      - "5556:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=users-db
    healthcheck:
      test: ["CMD", "pg_isready -U user"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - users_data:/var/lib/postgresql/data
      
  auth-service-1:
    container_name: auth-service-1
    build:
      context: ./user-auth-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - users-pg
    ports:
      - "8082:8081"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=admin
      - DB_HOST=users-pg
      - DB_PORT=5432
      - DB_NAME=users-db
      - APP_PORT=8081

  auth-service-2:
    container_name: auth-service-2
    build:
      context: ./user-auth-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - users-pg
    ports:
      - "8083:8081"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=admin
      - DB_HOST=users-pg
      - DB_PORT=5432
      - DB_NAME=users-db
      - APP_PORT=8081
          
  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - broker
    deploy:
      mode: replicated
      replicas: 1

  reverse-proxy:
    image: nginx
    container_name: reverse-proxy
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - auth-service-1
      - auth-service-2
      - task-service-1
      - task-service-2
    ports:
      - 80:80
    restart: on-failure
    

# networks:
#   net1:
#     driver: bridge

volumes:
  tasks_data:
  users_data:
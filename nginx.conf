events {
    worker_connections 1024; 
}

http {
    # Upstream block for load balancing microservices
    upstream auth {
        server auth-service:8081; 
    }

    upstream task {
        server task-service:8080;
    }

    server {
        listen 80;
        server_name localhost;

        location /api/v1/auth/login {
            # Direct requests to the security service without authentication check
            proxy_pass http://auth/api/v1/auth/login;
        }

        location /api/v1/auth/register {
            # Direct requests to the security service without authentication check
            proxy_pass http://auth/api/v1/auth/register;
        }

           location /api/v1/auth/validate {
            # Direct requests to the security service without authentication check
            proxy_pass http://auth/api/v1/auth/validate;
        }

        location /api/v1/tasks {
            # Redirect to the security service for authentication check
            auth_request /auth/validate;

            # Set X-User-Id header based on the response from the security service
            auth_request_set $user_id $upstream_http_x_user_id;
            proxy_set_header X-User-Id $user_id;

            proxy_pass http://task/api/v1/tasks;
        }

        location /auth/validate {
            internal;
            proxy_pass http://auth/api/v1/auth/validate;
            proxy_method POST;
            proxy_pass_request_body off;
            proxy_set_header Host $host;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
        }

        error_page 401 = @auth_required;
        location @auth_required {
            return 401 "Authentication required";
        }
    }
}